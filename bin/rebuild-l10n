#!/bin/bash

TEST=
if [ "$1" = "--test" ] ; then 
	TEST=1
fi
RSYNC=1
if [ "$1" = "--norsync" ] ; then
	RSYNC=0
fi
TASK=
ALL=

rebuild() {
	SCRIPT=$1
	CONF=$2
	SLOT=$3
	DIR="/usr/wikia/$SLOT/cache/messages/"
	if [ -e $SCRIPT -a -e $CONF ] ; then
		CMD="SERVER_ID=4036 /usr/bin/php $SCRIPT --force --conf $CONF"
		if [ -n "$TASK" ] ; then
			CMD="$CMD --task $TASK"
		fi
		
		# set user.group
		CMD_CHOWN="chown release.www-data $DIR"

		# run it
		if [ -z $TEST ] ; then
			eval $CMD
			eval $CMD_CHOWN
		else
			echo $CMD
			echo $CMD_CHOWN
		fi
		
		if [ -n "${SLOT}" ] && [ -n "${RSYNC}" ] ; then
			grep -v -f /etc/dsh/group/all_staging /etc/dsh/group/all_web | sort -r | while read line; do
				DEST_DIR="$line:$DIR"
				CMD_RSYNC="/usr/bin/rsync -e 'ssh -o StrictHostKeyChecking=no' -Pavq $DIR $DEST_DIR";
				if [ -z $TEST ]; then
					echo $CMD_RSYNC
					eval $CMD_RSYNC
				else 
					echo $CMD_RSYNC
				fi
			done
		fi
	fi
}

rebuild_legacy() {
	rebuild "/usr/wikia/source/wiki/maintenance/rebuildLocalisationCache.php" "/usr/wikia/conf/current/wiki.factory/LocalSettings.php"
}

rebuild_slot() {
	rebuild "/usr/wikia/slot$1/code/maintenance/rebuildLocalisationCache.php" "/usr/wikia/slot$1/docroot/LocalSettings.php" "slot$1"
}

rebuild_all_slots() {
	for i in `seq 1 4` ; do
		rebuild_slot $i
	done
}

if [ "$(id -u)" == "0" ]; then
   echo "This script must be run as release user" 1>&2
   exit 1
fi

LOCK="/tmp/.l10-lockfile"
# If the rebuild file is there, remove it and start rebuilding the localization cache for all codebases
ALL_REBUILD_FILE="/tmp/l10n-rebuild"
if [ -e "${ALL_REBUILD_FILE}" ] && [ ! -e ${LOCK} ] ; then
	touch "${LOCK}"
	ALL=1
	TASK=`cat ${ALL_REBUILD_FILE}`
	rebuild_legacy
	rebuild_all_slots
	TASK=
	rm -f "${ALL_REBUILD_FILE}"
	rm "${LOCK}"
fi

# Allow rebuilding localisation cache only in specific Medusa slot
for i in `seq 1 4` ; do
	if [ -e "${ALL_REBUILD_FILE}-slot$i" ] && [ ! -e ${LOCK} ] ; then
		touch "${LOCK}"
		if [ -z $ALL ] ; then
			rebuild_slot $i
			TASK=
		fi
		rm -f /tmp/l10n-rebuild-slot$i
		rm "${LOCK}"
	fi
done


